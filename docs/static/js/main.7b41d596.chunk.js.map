{"version":3,"sources":["ProgressRing.jsx","Loader.jsx","ProgressBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["animation","keyframes","Ring","styled","div","props","size","border","color","ProgressRing","Dimmer","Loader","Progress","Bar","ProgressBar","App","useState","show","setShow","useEffect","it","setTimeout","clearTimeout","style","width","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGMA,EAAYC,YAAH,wEAMTC,EAAOC,IAAOC,IAAV,2OAEC,SAAAC,GAAK,OAAIA,EAAMC,QACd,SAAAD,GAAK,OAAIA,EAAMC,QACf,SAAAD,GAAK,OAAIA,EAAME,UAAkB,SAAAF,GAAK,OAAIA,EAAMG,QAG7CR,GAYAS,EATM,SAAC,GAAqB,IAAnBD,EAAkB,EAAlBA,MAAOF,EAAW,EAAXA,KACvBC,EAAyB,KAAhB,OAACD,QAAD,IAACA,IAAQ,KACxB,OAAO,cAACJ,EAAD,CACLM,MAAK,OAAEA,QAAF,IAAEA,IAAS,aAChBF,KAAI,OAAEA,QAAF,IAAEA,IAAQ,IACdC,OAAQA,KCpBNG,EAASP,IAAOC,IAAV,uNAkBGO,EANA,WACb,OAAO,cAACD,EAAD,UACL,cAAC,EAAD,CAAcF,MAAM,QAAQF,KAAM,QCfhCN,EAAYC,YAAH,4FAUTW,EAAWT,IAAOC,IAAV,0JASRS,EAAMV,IAAOC,IAAV,yKAIa,SAAAC,GAAK,uBAAIA,EAAMG,aAAV,QAAmB,eAE/BR,GASAc,EANK,SAAC,GAAe,IAAbN,EAAY,EAAZA,MACrB,OAAO,cAACI,EAAD,UACL,cAACC,EAAD,CAAKL,MAAOA,OCCDO,MA7Bf,WAAgB,IAAD,EACWC,oBAAS,GADpB,mBACNC,EADM,KACAC,EADA,KAab,OAVAC,qBAAU,WACR,IAAIC,EAMJ,OALIH,IACFG,EAAKC,YAAW,WACdH,GAAQ,KACP,MAEEI,aAAaF,KACnB,CAACH,IAGF,qCACE,sBAAKM,MAAO,CAAEC,MAAO,KAArB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAahB,MAAM,WACnB,cAAC,EAAD,CAAcF,KAAM,MACpB,cAAC,EAAD,CAAcE,MAAM,SAASF,KAAM,SAErC,gCACE,wBAAQmB,QAAS,kBAAMP,GAAQ,IAA/B,yBACCD,GAAQ,cAAC,EAAD,WChBFS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b41d596.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n  to {\n    transform: rotate(1turn);\n  }\n`;\n\nconst Ring = styled.div`\n  display: inline-block;\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  border: ${props => props.border}px solid ${props => props.color};\n  border-radius: 50%;\n  clip-path: polygon(0 15%, 100% 15%, 100% 85%, 0 85%);\n  animation: ${animation} 1s linear infinite;\n`;\n\nconst ProgressRing = ({ color, size }) => {\n  const border = (size ?? 200) * 0.03\n  return <Ring \n    color={color ?? 'dodgerblue'} \n    size={size ?? 200}\n    border={border}\n  />\n};\n\nexport default ProgressRing;","import React from 'react';\nimport styled from 'styled-components';\nimport ProgressRing from './ProgressRing';\n\nconst Dimmer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Loader = () => {\n  return <Dimmer>\n    <ProgressRing color=\"white\" size={50} />\n  </Dimmer>\n};\n\nexport default Loader;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n  50% {\n    width: 100%;\n  }\n\n  100% {\n    right: 0;\n  }\n`;\n\nconst Progress = styled.div`\n  position: relative;\n  width: 100%;\n  height: 20px;\n  border-radius: 20px;\n  box-shadow: 0 0 1px inset;\n  margin: 5px;\n`;\n\nconst Bar = styled.div`\n  position: absolute;\n  width: 0;\n  height: 100%;\n  background-color: ${props => props.color ?? 'dodgerblue'};\n  border-radius: 20px;\n  animation: ${animation} 1s linear infinite;\n`;\n\nconst ProgressBar = ({ color }) => {\n  return <Progress>\n    <Bar color={color} />\n  </Progress>\n};\n\nexport default ProgressBar;","import { useEffect, useState } from \"react\";\nimport Loader from \"./Loader\";\nimport ProgressBar from \"./ProgressBar\";\nimport ProgressRing from \"./ProgressRing\";\n\nfunction App() {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    let it;\n    if (show) {\n      it = setTimeout(() => {\n        setShow(false);\n      }, 2000);\n    }\n    return clearTimeout(it);\n  }, [show]);\n\n  return (\n    <>\n      <div style={{ width: 300 }}>\n        <ProgressBar />\n        <ProgressBar color=\"purple\" />\n        <ProgressRing size={100} />\n        <ProgressRing color=\"purple\" size={100} />\n      </div>\n      <div>\n        <button onClick={() => setShow(true)}>Show loader</button>\n        {show && <Loader />}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}